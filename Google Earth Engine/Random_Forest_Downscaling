var palette = [
  '000067', '0000ff', '0099ff', '00ff66', '66ff00', 'ccff00', 'ffff00', 
  'ffcc00', 'ff9900', 'ff6600', 'ff3300', 'cc0000', '990000', '660000', '330000'
];

var merra_airtmpt = ee.ImageCollection('NASA/GSFC/MERRA/slv/2')
  .filter(ee.Filter.date('2022-06-15', '2022-09-29'))
  .select('T2M')
  .mean()
  .clip(geometry);

var merra_projection = merra_airtmpt.projection();
var merra_scale = 69375;
var merra_airtmpt_res = merra_airtmpt
  .subtract(273.15)
  .resample('bicubic')
  .reproject({
    crs: merra_projection,
    scale: merra_scale
  });

var modis = ee.ImageCollection('MODIS/061/MOD09CMG')
  .filter(ee.Filter.date('2022-06-15', '2022-09-29'))
  .mean()
  .clip(geometry);

var nasadem = ee.Image('NASA/NASADEM_HGT/001')
  .select('elevation')
  .clip(geometry)
  .resample('bicubic')
  .reproject({
    crs: modis.projection(),
    scale: modis.projection().nominalScale()
  });

var nir = modis.select('Coarse_Resolution_Surface_Reflectance_Band_2');
var red = modis.select('Coarse_Resolution_Surface_Reflectance_Band_1');
var ndvi = nir.subtract(red).divide(nir.add(red));

var brightnessTempBands = modis.select([
  'Coarse_Resolution_Brightness_Temperature_Band_20', 
  'Coarse_Resolution_Brightness_Temperature_Band_21', 
  'Coarse_Resolution_Brightness_Temperature_Band_31', 
  'Coarse_Resolution_Brightness_Temperature_Band_32'
]).subtract(273.15).multiply(0.01);

var comb_highresimage = ee.Image.cat(nasadem, ndvi, brightnessTempBands)
  .rename(['Elevation', 'NDVI', 'T20', 'T21', 'T31', 'T32'])
  .resample('bicubic');

var comb_lowresimage = comb_highresimage
  .resample('bicubic')
  .reproject({
    crs: merra_projection,
    scale: merra_scale
  });

var bands = ['Elevation', 'NDVI', 'T20', 'T21', 'T31', 'T32'];

var samples = ee.Image.cat(comb_lowresimage, merra_airtmpt_res).sample({
  numPixels: 1000,
  seed: 123,
  scale: merra_scale,
});

var split = 0.7;
var withRandom = samples.randomColumn('random');
var training = withRandom.filter(ee.Filter.lt('random', split));
var testing = withRandom.filter(ee.Filter.gte('random', split));

var rf = ee.Classifier.smileRandomForest(50)
  .setOutputMode('REGRESSION')
  .train({
    features: training,
    classProperty: 'T2M',
    inputProperties: bands
  });

var prediction = comb_lowresimage.select(bands).classify(rf);

var prediction_final = comb_highresimage.select(bands).classify(rf);
