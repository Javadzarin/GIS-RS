var sentinel2 = ee.ImageCollection('COPERNICUS/S2_HARMONIZED');
Map.addLayer(areaOfInterest, {color: 'red'}, 'Farm');
Map.centerObject(areaOfInterest);
var rgbVisualization = {min: 0.0, max: 3000, bands: ['B4', 'B3', 'B2']};
var filteredCollection = sentinel2
  .filter(ee.Filter.date('2017-01-01', '2018-01-01'))
  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 30))
  .filter(ee.Filter.bounds(areaOfInterest));

function cloudMask(image) {
  var qaBand = image.select('QA60');
  var cloudMask = 1 << 10;
  var cirrusMask = 1 << 11;
  var combinedMask = qaBand.bitwiseAnd(cloudMask).eq(0).and(
                     qaBand.bitwiseAnd(cirrusMask).eq(0));
  return image.updateMask(combinedMask).multiply(0.0001)
      .select('B.*')
      .copyProperties(image, ['system:time_start']);
}

filteredCollection = filteredCollection.map(cloudMask);

function addNDVIBand(image) {
  var ndviBand = image.normalizedDifference(['B8', 'B4']).rename('ndvi');
  return image.addBands(ndviBand);
}

var collectionWithNDVI = filteredCollection.map(addNDVIBand);

var extractedValues = collectionWithNDVI.map(function(image) {
  var ndviBand = image.select('ndvi');
  
  var reducers = ee.Reducer.median()
    .combine({reducer2: ee.Reducer.min(), sharedInputs: true})
    .combine({reducer2: ee.Reducer.max(), sharedInputs: true})
    .combine({reducer2: ee.Reducer.percentile([25]), sharedInputs: true})
    .combine({reducer2: ee.Reducer.percentile([50]), sharedInputs: true})
    .combine({reducer2: ee.Reducer.percentile([75]), sharedInputs: true});
  
  var stats = ndviBand.reduceRegion({
    reducer: reducers,
    geometry: areaOfInterest,
    scale: 10});
  var date = image.date();
  var dateString = date.format('YYYY-MM-dd');

  var properties = {
    'date': dateString,
    'median': stats.get('ndvi_p50'),
    'min': stats.get('ndvi_min'),
    'max': stats.get('ndvi_max'),
    'p25': stats.get('ndvi_p25'),
    'p50': stats.get('ndvi_p50'),
    'p75': stats.get('ndvi_p75'),
  };
  return ee.Feature(null, properties);
});

extractedValues = extractedValues.filter(ee.Filter.notNull(
  ['median', 'min', 'max', 'p25', 'p50', 'p75']));
print(extractedValues);

var dateList = extractedValues.aggregate_array('date');

function formatDateString(date) {
  var year = ee.Date(date).get('year').format();
  var month = ee.Date(date).get('month').subtract(1).format();
  var day = ee.Date(date).get('day').format();
  return ee.String('Date(')
    .cat(year)
    .cat(', ')
    .cat(month)
    .cat(', ')
    .cat(day)
    .cat(ee.String(')'));
}

var rowList = dateList.map(function(date) {
  var feature = extractedValues.filter(ee.Filter.eq('date', date)).first();
  var formattedDate = formatDateString(date);
  var median = feature.getNumber('median');
  var p25 = feature.getNumber('p25');
  var p50 = feature.getNumber('p50');
  var p75 = feature.getNumber('p75');
  var min = ee.Number.expression('p25 - 1.5*(p75-p25)', {
    p75: ee.Number(p75),
    p25: ee.Number(p25)});
  var max = ee.Number.expression('p75 + 1.5*(p75-p25)', {
    p75: ee.Number(p75),
    p25: ee.Number(p25)});
  var minValue = feature.getNumber('min');
  var maxValue = feature.getNumber('max');
  var minOutlier = ee.Algorithms.If(minValue.lt(min), minValue, null);
  var maxOutlier = ee.Algorithms.If(maxValue.gt(max), maxValue, null);
  var rowDict = {
    c: [{v: formattedDate}, {v: median}, {v: minOutlier}, {v: maxOutlier}, {v: min}, {v: max},
        {v: p25}, {v: p50}, {v: p75}]
  };
  return rowDict;
});

print('Rows', rowList);

rowList.evaluate(function(rowListClient) {
  var dataTable = {
    cols: [
      {id: 'x', type: 'date'},
      {id: 'median', type: 'number'},
      {id: 'minOutlier', type: 'number', role: 'interval'},
      {id: 'maxOutlier', type: 'number', role: 'interval'},
      {id: 'min', type: 'number', role: 'interval'},
      {id: 'max', type: 'number', role: 'interval'},
      {id: 'firstQuartile', type: 'number', role: 'interval'},
      {id: 'median', type: 'number', role: 'interval'},
      {id: 'thirdQuartile', type:'number', role: 'interval'},
    ],
    rows: rowListClient
  };

  var options = {
    title:'NDVI Time-Series Box Plot with Outliers',
    vAxis: {
      title: 'NDVI',
      gridlines: {
        color: '#d9d9d9'
      },
      minorGridlines: {
        color: 'transparent'
      },
      viewWindow: {
        min: -0.2,
        max: 1
      }
    },
    hAxis: {
      title: '',
      format: 'YYYY-MMM',
      viewWindow: {
        min: new Date(2017, 0),
        max: new Date(2018, 0)
      },
      gridlines: {
        color: '#d9d9d9'
      },
      minorGridlines: {
        color: 'transparent'
      }
    },
    legend: {position: 'none'},
    lineWidth: 1,
    series: [{'color': '#D3362D'}],
    interpolateNulls: true,
    intervals: {
      barWidth: 2,
      boxWidth: 4,
      lineWidth: 1,
      style: 'boxes'
    },
    interval: {
      min: {
        style: 'bars',
        fillOpacity: 1,
        color: '#777777'
      },
      max: {
        style: 'bars',
        fillOpacity: 1,
        color: '#777777'
      },
      minOutlier: {
        style: 'points',
        pointSize: 2
      },
      maxOutlier: {
        style: 'points',
        pointSize: 2
      },
    },
    chartArea: {left:100, right:100}
  };
    
  var chart = ui.Chart(dataTable, 'LineChart', options);
  print(chart);
});
