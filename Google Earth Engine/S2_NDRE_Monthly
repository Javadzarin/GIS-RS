Map.addLayer(table);
Map.centerObject(table);
var study_area = table;
var date_start = ee.Date('2018-01-01');
var date_end= ee.Date('2023-12-31');
var S2 = ee.ImageCollection("COPERNICUS/S2_SR")
                .filterBounds(study_area)        
                .filterDate(date_start.advance(-1,'year'),date_end);
function filterS2_level2A(image) {
  var SCL = image.select('SCL');
  var mask01 = ee.Image(0).where(
      SCL.lt(8).and(SCL.gt(3)) ,1);
  return image.updateMask(mask01);
}
var S2filtered= S2.map(filterS2_level2A);
function addNDRE(image) {
  var ndre = image.normalizedDifference(['B8','B5'])
                  .multiply(10000).int16();
  return image.addBands(ndre.rename('ndre'));
}
var S2filtered = S2filtered.map(addNDRE);
var S2filtered = S2filtered.select('ndre');
var S2_clipped = S2filtered.map(function(img){ 
                    return img.clip(study_area)});
var months = ee.List.sequence(1, 12);
var years = ee.List.sequence(date_start.advance(-1,"year")
                                       .get("year"),
                             date_end.get("year"));
var composite = years.map(function (y) {
     return ee.ImageCollection.fromImages(months.map(function (m) {
      return S2_clipped.filter(ee.Filter.calendarRange(y,y,'year'))
                       .filter(ee.Filter.calendarRange(m,m,'month'))
                       .median()
                       .set('month',m, 'year',y);
    }))
  });
function decomposeList(l) {
  return ee.ImageCollection(l).toList(12)
}
var list_imgs = composite.map(decomposeList).flatten();
function renameImages(img1) {
  var img = ee.Image(img1);
  var value = ee.Number(img.get('year')).format('%04d')
          .cat('_').cat(ee.Number(img.get('month')).format('%02d'));
  return ee.Image(img.set('system:index', value, 'system:id',value))
}
var list_imgs_renamed = list_imgs.map(renameImages);
var decomposed_collection = ee.ImageCollection(list_imgs_renamed);
function setTime(img) {
  return img.set('system:time_start', ee.Date.fromYMD(
                  img.get('year'),img.get('month'),01).millis())
}
function addNumBands(img){
  return img.set('num_bands', img.bandNames().length())
}
function addTime(img) {
  var time = ee.Image(img.date().millis()).rename('t').float();
  return img.addBands(time)
}
function addConstant(img) {
  return img.addBands(ee.Image.constant(1))
}
var decomposed_collection =  decomposed_collection.map(addNumBands);
var decomposed_collection = decomposed_collection
                                       .filter('num_bands > 0');
var decomposed_collection =  decomposed_collection.map(setTime)
var decomposed_collection =  decomposed_collection.map(addConstant)
var decomposed_collection =  decomposed_collection.map(addTime)
var dependent = 'ndre';
var harmonics = 3;
var harmonicFrequencies = ee.List.sequence(1, harmonics);
var getNames = function(base, list) {
  return ee.List(list).map(function(i) { 
    return ee.String(base).cat(ee.Number(i).int());
  });
};
var cosNames = getNames('cos_', harmonicFrequencies);
var sinNames = getNames('sin_', harmonicFrequencies);
var independents = ee.List(['constant', 't'])
                            .cat(cosNames).cat(sinNames);
var addHarmonics = function(freqs) {
  return function(image) {

    var frequencies = ee.Image.constant(freqs);
    
    var PI2 = 2.0 * Math.PI
    var time = ee.Image(image).select('t').multiply( PI2 / (1000 * 60 * 60 * 24 * 365.25));
    
    var cosines = time.multiply(frequencies).cos().rename(cosNames); 
    
    var sines = time.multiply(frequencies).sin().rename(sinNames);
    return image.addBands(cosines).addBands(sines);
  };
};
var harmonicSentinel = decomposed_collection.map(
                                addHarmonics(harmonicFrequencies));
var harmonicTrend = harmonicSentinel
   .select(independents.add(dependent))
   .reduce(ee.Reducer.linearRegression({
        numX: independents.length(),
        numY: 1}));
var harmonicTrendCoefficients = harmonicTrend.select('coefficients')
   .arrayProject([0])
   .arrayFlatten([independents]);
var fittedHarmonic = harmonicSentinel.map(function(image) {
   return image.addBands(image.select(independents)
        .multiply(harmonicTrendCoefficients)
        .reduce('sum')
        .rename('fitted'));
});
var original_ndre = decomposed_collection.select('ndre');
var fitted_ndre = fittedHarmonic.select('fitted');
var combined = original_ndre.combine(fitted_ndre);
var gap_filled_composite = combined.map(function(img){
            return img.select('ndre').unmask(img.select('fitted'))
});
var gap_filled_composite = gap_filled_composite
                                 .filterDate(date_start, date_end);
var singleBand = gap_filled_composite.toBands();
Map.addLayer(singleBand,{bands: '2022_08_ndre', min: 0, max: 10000,
                     palette: ['white', 'green']}, 'NDRE Aug');
Export.image.toDrive({
  image : singleBand,
  description : 'S2_NDRE_mean_2018_2023',
  scale : 10, 
   region : table,
   maxPixels : 1e13});
