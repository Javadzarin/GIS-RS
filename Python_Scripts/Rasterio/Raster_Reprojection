import rasterio
from rasterio.enums import Resampling
from rasterio.warp import calculate_default_transform, reproject

# Path to the input raster file
input_raster_path = 'path_to_your_raster_file.tif'
# Path to the output raster file
output_raster_path = 'path_to_reprojected_raster_file.tif'

# Define the new coordinate system to reproject into
new_crs = 'EPSG:4326'  # WGS84 Latitude/Longitude

# Open the input raster file
with rasterio.open(input_raster_path) as src:
    # Read the original CRS and affine transformation matrix
    orig_crs = src.crs
    orig_transform = src.transform

    # Calculate the transform and dimensions needed for the new CRS
    transform, width, height = calculate_default_transform(
        src.crs, new_crs, src.width, src.height, *src.bounds)

    # Define metadata for the output raster
    meta = src.meta.copy()
    meta.update({
        'crs': new_crs,
        'transform': transform,
        'width': width,
        'height': height
    })

    # Reproject and write each band
    with rasterio.open(output_raster_path, 'w', **meta) as dst:
        for i in range(1, src.count + 1):
            # Read each band from source raster
            band = src.read(i)
            reprojected_band = np.empty((height, width), dtype=rasterio.float32)

            # Reproject the band from the original CRS to the new CRS
            reproject(
                source=band,
                destination=reprojected_band,
                src_transform=orig_transform,
                src_crs=orig_crs,
                dst_transform=transform,
                dst_crs=new_crs,
                resampling=Resampling.nearest  # Resampling method
            )

            # Write the reprojected band to the output file
            dst.write(reprojected_band, i)
