import geopandas as gpd
from shapely.geometry import Point
import pandas as pd

# Load a sample geospatial dataset
world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))

# Handling missing data
# For example, fill missing 'pop_est' values with the mean population of the respective continent
mean_population_by_continent = world.groupby('continent')['pop_est'].transform('mean')
world['pop_est'] = world['pop_est'].fillna(mean_population_by_continent)

# Correcting invalid geometries
# Identify invalid geometries
invalid_geometries = world[world.geometry.is_invalid]
print(f"Invalid geometries found: {len(invalid_geometries)}")

# Attempt to fix invalid geometries using buffer(0)
world['geometry'] = world.geometry.buffer(0)

# Aligning Coordinate Systems
# Suppose we have another dataset of cities that is in a different CRS
cities_data = {'city': ['Paris', 'Tokyo'], 'country': ['France', 'Japan'],
               'geometry': [Point(2.3522, 48.8566), Point(139.6917, 35.6895)]}
cities = gpd.GeoDataFrame(cities_data, crs='epsg:4326')  # WGS 84

# Convert cities' CRS to match the world dataset
cities = cities.to_crs(world.crs)

# Merge the datasets
merged_data = world.merge(cities, on='country', how='inner')

# Display the cleaned and merged data
print(merged_data[['country', 'pop_est', 'city', 'geometry_x', 'geometry_y']].head())

# Optional: visualize the corrected geometries and city locations
import matplotlib.pyplot as plt
fig, ax = plt.subplots(figsize=(15, 10))
world.plot(ax=ax, color='lightblue', edgecolor='black')
cities.plot(ax=ax, color='red', markersize=5)
plt.title('World Map with Cities')
plt.show()
